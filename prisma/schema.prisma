generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TransferStatus {
  PENDING
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum StoreRole {
  MAIN
  BRANCH
}

model User {
  id          String      @id @default(cuid())
  name        String?
  email       String?     @unique
  phone       String?     @unique
  password    String?
  role        Role        @default(CUSTOMER)
  status      String      @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  permissions String[]    @default([]) // Array of permission strings
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  addresses   Address[]
  orders      Order[]
  UserStore   UserStore[]
  createdTransfers    StoreTransfer[] @relation("CreatedTransfers")
  approvedTransfers   StoreTransfer[] @relation("ApprovedTransfers")
}

model Product {
  id                String         @id @default(cuid())
  name              String
  description       String
  shortDescription  String?
  sku               String?
  barcode           String?
  slug              String?
  price             Float
  salePrice         Float?
  cost              Float?
  taxRate           Float?
  categoryId        String
  subcategory       String?
  status            String          @default("ACTIVE") // ACTIVE, INACTIVE, DRAFT, ARCHIVED
  featured          Boolean         @default(false)
  bestseller        Boolean         @default(false)
  new               Boolean         @default(false)
  occasions         String[]
  tags              String[]
  images            String[]
  thumbnail         String?
  customizable      Boolean         @default(false)
  minimumOrderQuantity Int           @default(1)
  maximumOrderQuantity Int           @default(100)
  leadTime          Int?            // in hours
  availableForDelivery Boolean       @default(true)
  availableForPickup  Boolean       @default(true)
  freeDelivery      Boolean         @default(false)
  deliveryFee       Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  updatedBy         String?
  inventory         Inventory[]
  orderItems        OrderItem[]
  category          Category        @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  transfers         Transfer[]
  storeTransfers    StoreTransfer[]
  variants          ProductVariant[]
  customizationOptions ProductCustomizationOption[]
  ingredients       ProductIngredient[]
  nutritionalInfo   NutritionalInfo?
  careInstructions  CareInstructions?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String?
  image       String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  status        OrderStatus   @default(PENDING)
  deliveryDate  DateTime
  deliveryTime  String
  deliveryType  DeliveryType
  addressId     String
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  staffId       String?
  customerId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  address       Address       @relation(fields: [addressId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  staff         Staff?        @relation(fields: [staffId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float
  customText String?
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String    @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String?
  customerId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customer   Customer? @relation(fields: [customerId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Store {
  id                    String      @id @default(cuid())
  name                  String
  storeRole            StoreRole   @default(BRANCH)
  address               String
  city                  String
  state                 String
  country               String
  postalCode            String
  phone                 String
  email                 String
  managerName           String
  status                String      @default("ACTIVE")
  storeType             String      @default("MULTI_SPECIALTY")
  operatingHours        Json?
  taxIdentificationNumber String?
  size                  Float?
  capacity              Int?
  features              String[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  createdBy             String
  inventory             Inventory[]
  UserStore             UserStore[]
  sourceTransfers       StoreTransfer[] @relation("SourceTransfers")
  destinationTransfers  StoreTransfer[] @relation("DestinationTransfers")
  transfersAsSource     Transfer[]   @relation("SourceStore")
  transfersAsDestination Transfer[]  @relation("DestinationStore")

  @@index([status])
  @@index([storeRole])
}

model UserStore {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  @@unique([userId, storeId])
}

model Inventory {
  id              String    @default(cuid())
  storeId         String
  productId       String
  quantity        Int       @default(0)
  minimumStock    Int       @default(0)
  reorderPoint    Int       @default(0)
  reorderQuantity Int       @default(0)
  store           Store     @relation(fields: [storeId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
  movements       StockMovement[]
  history         InventoryHistory[]
  adjustments     StockAdjustment[]
  reservations    StockReservation[]
  alerts          InventoryAlert[]

  @@id([storeId, productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Staff {
  id        String      @id @default(cuid())
  name      String
  email     String      @unique
  role      Role
  phone     String?
  address   String?
  joinDate  DateTime    @default(now())
  status    StaffStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  orders    Order[]
  shifts    Shift[]
}

model Shift {
  id        String      @id @default(cuid())
  staffId   String
  startTime DateTime
  endTime   DateTime
  status    ShiftStatus @default(SCHEDULED)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  staff     Staff       @relation(fields: [staffId], references: [id])
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  phone         String?
  preferences   Json?
  loyaltyPoints Int            @default(0)
  tags          String[]
  lastOrderDate DateTime?
  status        CustomerStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  notes         CustomerNote[]
  orders        Order[]
}

model CustomerNote {
  id         String   @id @default(cuid())
  customerId String
  content    String
  createdBy  String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
}

model InventoryHistory {
  id          String    @id @default(cuid())
  storeId     String
  productId   String
  quantity    Int
  type        String
  description String
  userId      String
  userName    String
  createdAt   DateTime  @default(now())
  inventory   Inventory @relation(fields: [storeId, productId], references: [storeId, productId])
}

model StockMovement {
  id          String      @id @default(cuid())
  storeId     String
  productId   String
  inventory   Inventory   @relation(fields: [storeId, productId], references: [storeId, productId])
  quantity    Int
  type        MovementType
  reference   String?
  description String?
  unitCost    Decimal?
  date        DateTime    @default(now())
  performedBy String
}

enum MovementType {
  PURCHASE
  SALE
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
  RETURN
  DAMAGED
  EXPIRED
}

model StockAdjustment {
  id          String           @id @default(cuid())
  storeId     String
  productId   String
  inventory   Inventory        @relation(fields: [storeId, productId], references: [storeId, productId])
  quantity    Int
  reason      AdjustmentReason
  notes       String?
  date        DateTime         @default(now())
  approvedBy  String?
  performedBy String
}

enum AdjustmentReason {
  DAMAGED
  EXPIRED
  LOST
  FOUND
  THEFT
  COUNT_ADJUSTMENT
  OTHER
}

model StockReservation {
  id          String            @id @default(cuid())
  storeId     String
  productId   String
  inventory   Inventory         @relation(fields: [storeId, productId], references: [storeId, productId])
  quantity    Int
  orderId     String?
  status      ReservationStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime          @default(now())
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FULFILLED
}

model InventoryAlert {
  id            String      @id @default(cuid())
  storeId       String
  productId     String
  type          AlertType
  message       String
  severity      String?
  metadata      Json?
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  resolvedAt    DateTime?

  inventory     Inventory   @relation(fields: [storeId, productId], references: [storeId, productId])
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRING_SOON
  EXPIRED
  OVER_STOCK
  REORDER_POINT
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  ON_HOLD
  DISCONTINUED
}

enum Role {
  SUPER_ADMIN
  STORE_MANAGER
  STORE_STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ONLINE
  CASH
}

enum DeliveryType {
  HOME_DELIVERY
  STORE_PICKUP
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  VIP
  BLOCKED
}

model Warehouse {
  id           String        @id @default(cuid())
  name         String
  location     String?
  capacity     Float?
  description  String?
  status       String?       @default("ACTIVE")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rawMaterials RawMaterial[]
}

model RawMaterial {
  id            String   @id @default(cuid())
  name          String
  quantity      Float
  unit          String
  minimumStock  Float
  currentStock  Float
  warehouseId   String
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  consumption   MaterialConsumption[]
}

model Production {
  id            String   @id @default(cuid())
  productId     String
  quantity      Float
  startDate     DateTime
  endDate       DateTime
  wastage       Float
  status        ProductionStatus
  consumption   MaterialConsumption[]
}

model MaterialConsumption {
  id            String   @id @default(cuid())
  rawMaterialId String
  productionId  String
  quantity      Float
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  production    Production @relation(fields: [productionId], references: [id])
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  name          String
  sku           String?
  price         Float
  salePrice     Float?
  size          String?
  color         String?
  flavor        String?
  weight        Float?
  dimensions    Json?
  images        String[]
  stockQuantity Int      @default(0)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductCustomizationOption {
  id              String   @id @default(cuid())
  productId       String
  name            String
  type            String
  required        Boolean  @default(false)
  options         Json?
  maxLength       Int?
  additionalPrice Float    @default(0)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductIngredient {
  id        String  @id @default(cuid())
  productId String
  name      String
  quantity  Float
  unit      String
  allergen  Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model NutritionalInfo {
  id        String   @id @default(cuid())
  productId String   @unique
  calories  Float?
  fat       Float?
  carbs     Float?
  protein   Float?
  sugar     Float?
  allergens String[]
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CareInstructions {
  id                String  @id @default(cuid())
  productId         String  @unique
  wateringFrequency String?
  sunlightNeeds     String?
  temperature       String?
  shelfLife         String?
  storageInfo       String?
  additionalNotes   String?
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String
  config      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transfer {
  id                String         @id @default(cuid())
  sourceStoreId     String
  destinationStoreId String
  productId         String
  quantity          Int
  status            TransferStatus @default(PENDING)
  notes             String?
  createdAt         DateTime       @default(now())
  completedAt       DateTime?
  createdBy         String

  sourceStore      Store          @relation("SourceStore", fields: [sourceStoreId], references: [id])
  destinationStore Store          @relation("DestinationStore", fields: [destinationStoreId], references: [id])
  product          Product        @relation(fields: [productId], references: [id])
}

model StoreTransfer {
  id              String         @id @default(cuid())
  sourceStore     Store          @relation("SourceTransfers", fields: [sourceStoreId], references: [id])
  sourceStoreId   String
  destStore       Store          @relation("DestinationTransfers", fields: [destStoreId], references: [id])
  destStoreId     String
  product         Product        @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  status          TransferStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  completedAt     DateTime?
  createdBy       User           @relation("CreatedTransfers", fields: [createdById], references: [id])
  createdById     String
  approvedBy      User?          @relation("ApprovedTransfers", fields: [approvedById], references: [id])
  approvedById    String?
  notes           String?
}












