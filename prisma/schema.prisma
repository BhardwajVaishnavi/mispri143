datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  role          Role      @default(CUSTOMER)
  addresses     Address[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String
  price           Float
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  images          String[]
  customizable    Boolean       @default(false)
  reviews         Review[]
  inventory       Inventory?
  orderItems      OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  products    Product[]
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  deliveryDate    DateTime
  deliveryTime    String
  deliveryType    DeliveryType
  address         Address     @relation(fields: [addressId], references: [id])
  addressId       String
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  price       Float
  customText  String?
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  orders      Order[]
}

model Inventory {
  id          String   @id @default(cuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @unique
  quantity    Int
  storeId     String?
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

enum Role {
  SUPER_ADMIN
  STORE_ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ONLINE
  CASH
}

enum DeliveryType {
  HOME_DELIVERY
  STORE_PICKUP
}