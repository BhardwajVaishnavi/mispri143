generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Simplified User model
model User {
  id          String    @id @default(cuid())
  name        String?
  email       String    @unique
  password    String?
  role        String    @default("CUSTOMER") // SUPER_ADMIN, STORE_MANAGER, STORE_STAFF, CUSTOMER
  image       String?
  status      String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  permissions String    @default("[]") // Stored as JSON string
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storeId     String?
  store       Store?    @relation(fields: [storeId], references: [id])
  orders      Order[]
  sessions    Session[]
}

// Simplified Store model
model Store {
  id                    String     @id @default(cuid())
  name                  String
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String?
  phone                 String?
  email                 String?
  website               String?
  description           String?
  logo                  String?
  coverImage            String?
  latitude              Float?
  longitude             Float?
  storeType             String     @default("MULTI_SPECIALTY")
  operatingHours        String?    // Stored as JSON string
  taxIdentificationNumber String?
  registrationNumber    String?
  capacity              Int?
  features              String     @default("[]") // Stored as JSON string
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  users                 User[]
  products              Product[]
  inventory             Inventory[]
  orders                Order[]
}

// Simplified Product model
model Product {
  id                String    @id @default(cuid())
  name              String
  description       String?
  price             Float
  compareAtPrice    Float?
  costPrice         Float?
  sku               String?   @unique
  barcode           String?
  weight            Float?
  weightUnit        String?
  dimensions        String?   // Stored as JSON string
  category          String?
  subcategory       String?
  brand             String?
  vendor            String?
  taxable           Boolean   @default(true)
  taxRate           Float?
  status            String    @default("ACTIVE") // ACTIVE, INACTIVE, DRAFT
  featured          Boolean   @default(false)
  bestseller        Boolean   @default(false)
  new               Boolean   @default(false)
  occasions         String    @default("[]") // Stored as JSON string
  tags              String    @default("[]") // Stored as JSON string
  images            String    @default("[]") // Stored as JSON string
  thumbnail         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  storeId           String
  store             Store     @relation(fields: [storeId], references: [id])
  inventory         Inventory[]
  orderItems        OrderItem[]
}

// Simplified Inventory model
model Inventory {
  id            String    @id @default(cuid())
  quantity      Int       @default(0)
  minimumStock  Int       @default(5)
  maximumStock  Int?
  location      String?
  status        String    @default("ACTIVE") // ACTIVE, INACTIVE, ON_HOLD, DISCONTINUED
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  storeId       String
  store         Store     @relation(fields: [storeId], references: [id])
}

// Simplified Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          String      @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  totalAmount     Float
  tax             Float?
  discount        Float?
  shippingCost    Float?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  storeId         String
  store           Store       @relation(fields: [storeId], references: [id])
  items           OrderItem[]
}

// Simplified OrderItem model
model OrderItem {
  id          String    @id @default(cuid())
  quantity    Int
  price       Float
  discount    Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
}

// Simplified Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
